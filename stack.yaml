AWSTemplateFormatVersion: 2010-09-09
Transform: AWS::Serverless-2016-10-31
Resources:
  UploadBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: 'input.image.bucket'
      AccessControl: BucketOwnerFullControl
      NotificationConfiguration:
        TopicConfigurations:
          - Topic: !Ref SNSTopic
            Event: 's3:ObjectCreated:*'
    DependsOn:
      - SNSTopicPolicy
      - SNSTopic

  TargetBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: 'target.image.bucket'

  SNSTopic:
    Type: AWS::SNS::Topic
    Properties:
      Subscription:
        - Endpoint:
            Fn::GetAtt:
              - "SQSLambda"
              - "Arn"
          Protocol: "sqs"
        - Endpoint:
            Fn::GetAtt:
              - "SQSRDS"
              - "Arn"
          Protocol: "sqs"
      TopicName: "NewImageUpload"

  SNSTopicPolicy:
    Type: 'AWS::SNS::TopicPolicy'
    Properties:
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: s3.amazonaws.com
            Action: 'sns:Publish'
            Resource: !Ref SNSTopic
            Condition:
              ArnEquals:
                aws:SourceArn: !Sub arn:${AWS::Partition}:s3:::input.image.bucket     
      Topics:
        - !Ref SNSTopic

  SQSLambda: 
    Type: AWS::SQS::Queue
    Properties:
      QueueName: 'SQSLambdaPool'
    
  SQSRDS: 
    Type: AWS::SQS::Queue
    Properties:
      QueueName: 'SQSRDSPool'

  SQSQueuePolicy:
    Type: AWS::SQS::QueuePolicy
    Properties:
      Queues:
        - !Ref SQSLambda
        - !Ref SQSRDS
      PolicyDocument:
        Id: AllowIncomingAccess
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - "sns.amazonaws.com"
            Action:
              - sqs:SendMessage
            Resource:
              Fn::GetAtt:
                - SQSLambda
                - Arn
            Condition:
              ArnEquals:
                aws:SourceArn:
                  Ref: SNSTopic
          - Effect: Allow
            Principal:
              Service:
                - "sns.amazonaws.com"
            Action:
              - sqs:SendMessage
            Resource:
              Fn::GetAtt:
                - SQSRDS
                - Arn
            Condition:
              ArnEquals:
                aws:SourceArn:
                  Ref: SNSTopic
    DependsOn:
      - SQSLambda
      - SQSRDS
      - SNSTopic

  LambdaLogGroup:
    Type: 'AWS::Logs::LogGroup'
    Properties:
      LogGroupName: '/aws/lambda/logs'
      RetentionInDays: 3

  LambdaS3:
    Type: 'AWS::Lambda::Function'
    DependsOn:
      - LambdaRole
      - LambdaLogGroup
    Properties:
      FunctionName: 'Lambda_S3_Copy_New_File'
      Handler: index.handler
      Runtime: python3.7
      MemorySize: 128
      Timeout: 30
      TracingConfig:
        Mode: Active
      Role:
        Fn::GetAtt:
          - LambdaRole
          - Arn
      Code:
        ZipFile: |
          import json
          import boto3

          print('Moving File')

          s3 = boto3.resource('s3')

          def handler(event, context):
              body = json.loads(event['Records'][0]['body'])
              message = json.loads(body['Message'])
              input_bucket = message['Records'][0]['s3']['bucket']['name']
              filename = message['Records'][0]['s3']['object']['key']
              
              copy_source = {
                  'Bucket': input_bucket,
                  'Key': filename.replace('+', ' ')
              }
              
              target_bucket = s3.Bucket('target.image.bucket')
              target_bucket.copy(copy_source, filename.replace('+', ' '))


  LambdaRole:
    Type: 'AWS::IAM::Role'
    DependsOn:
      - SQSLambda
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Policies:
        - PolicyName: 'lambda_allow_access'
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action: s3:*
                Resource: '*'
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: "arn:aws:logs:*:*:*"
              - Effect: Allow
                Action:
                  - sqs:ReceiveMessage
                  - sqs:DeleteMessage
                  - sqs:GetQueueAttributes
                  - sqs:ChangeMessageVisibility
                Resource: 
                  Fn::GetAtt:
                    - SQSLambda
                    - Arn
              - Effect: Allow
                Action:
                  - xray:PutTraceSegments
                  - xray:PutTelemetryRecords
                Resource: '*'

  LambdaS3EventListener:
    Type: 'AWS::Lambda::EventSourceMapping'
    DependsOn:
      - SQSLambda
      - LambdaS3
    Properties:
      BatchSize: 16
      MaximumBatchingWindowInSeconds: 30
      Enabled: true
      EventSourceArn: 
        Fn::GetAtt:
          - SQSLambda
          - Arn
      FunctionName: 
        Fn::GetAtt:
          - LambdaS3
          - Arn